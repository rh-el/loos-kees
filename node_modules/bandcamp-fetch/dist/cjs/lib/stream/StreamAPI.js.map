{"version":3,"file":"StreamAPI.js","sourceRoot":"","sources":["../../../../src/lib/stream/StreamAPI.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,sEAAmE;AACnE,wDAA6C;AAC7C,oDAAkD;AAQlD,MAAqB,SAAU,SAAQ,oBAAO;IAE5C,KAAK,CAAC,IAAI,CAAC,GAAW;QACpB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,EAAE,wBAAW,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,GAAW;QACvB,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC,mBAAI,CAAC,cAAc,CAAC,CAAC;QAChD,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACxC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC;QAC1D,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,IAAI,OAAO,GAAG,CAAC,GAAG,KAAK,QAAQ,EAAE,CAAC;YAClD,OAAO,GAAG,CAAC,GAAG,CAAC;QACjB,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAfD,4BAeC;AAED,MAAa,gBAAiB,SAAQ,SAAS;IAI7C,YAAY,MAA4C;QACtD,KAAK,CAAC,MAAM,CAAC,CAAC;QAHhB,4CAAkB;QAIhB,uBAAA,IAAI,6BAAY,MAAM,CAAC,OAAO,MAAA,CAAC;IACjC,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,GAAW;QACvB,OAAO,uBAAA,IAAI,iCAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;IAC1D,CAAC;CACF;AAZD,4CAYC","sourcesContent":["import BaseAPI, { type BaseAPIParams } from '../common/BaseAPI.js';\nimport { URLS } from '../utils/Constants.js';\nimport { FetchMethod } from '../utils/Fetcher.js';\nimport type Limiter from '../utils/Limiter.js';\n\nexport interface StreamTestResult {\n  ok: boolean;\n  status: number;\n}\n\nexport default class StreamAPI extends BaseAPI {\n\n  async test(url: string): Promise<StreamTestResult> {\n    return this.fetch(url, false, FetchMethod.HEAD);\n  }\n\n  async refresh(url: string): Promise<string | null> {\n    const refreshUrl = new URL(URLS.REFRESH_STREAM);\n    refreshUrl.searchParams.set('url', url);\n    const res = await this.fetch(refreshUrl.toString(), true);\n    if (res && res.url && typeof res.url === 'string') {\n      return res.url;\n    }\n    return null;\n  }\n}\n\nexport class LimiterStreamAPI extends StreamAPI {\n\n  #limiter: Limiter;\n\n  constructor(params: BaseAPIParams & { limiter: Limiter }) {\n    super(params);\n    this.#limiter = params.limiter;\n  }\n\n  async refresh(url: string): Promise<string | null> {\n    return this.#limiter.schedule(() => super.refresh(url));\n  }\n}\n"]}