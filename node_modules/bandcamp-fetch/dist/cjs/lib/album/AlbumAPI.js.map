{"version":3,"file":"AlbumAPI.js","sourceRoot":"","sources":["../../../../src/lib/album/AlbumAPI.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAEA,8EAAmD;AAEnD,sGAAmH;AASnH,MAAqB,QAAS,SAAQ,oCAAuB;IAE3D,KAAK,CAAC,OAAO,CAAC,MAA6B;QACzC,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC;QAC1D,MAAM,IAAI,GAAG;YACX,YAAY,EAAE,cAAc,CAAC,OAAO;YACpC,gBAAgB,EAAE,MAAM,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC;YAC3E,iBAAiB,EAAE,MAAM,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,iBAAiB,EAAE,EAAE,CAAC;YAC9E,cAAc,EAAE,MAAM,CAAC,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK;SACpF,CAAC;QACF,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC/C,OAAO,4BAAe,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC;CACF;AAbD,2BAaC;AAED,MAAa,eAAgB,SAAQ,QAAQ;IAI3C,YAAY,MAA4D;QACtE,KAAK,CAAC,MAAM,CAAC,CAAC;QAHhB,2CAAkB;QAIhB,uBAAA,IAAI,4BAAY,MAAM,CAAC,OAAO,MAAA,CAAC;IACjC,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,MAA6B;QACzC,OAAO,uBAAA,IAAI,gCAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;IAC7D,CAAC;CACF;AAZD,0CAYC","sourcesContent":["import type Album from '../types/Album.js';\nimport { type ImageFormat } from '../types/Image.js';\nimport AlbumInfoParser from './AlbumInfoParser.js';\nimport type Limiter from '../utils/Limiter.js';\nimport BaseAPIWithImageSupport, { type BaseAPIWithImageSupportParams } from '../common/BaseAPIWithImageSupport.js';\n\nexport interface AlbumAPIGetInfoParams {\n  albumUrl: string;\n  albumImageFormat?: string | number | ImageFormat;\n  artistImageFormat?: string | number | ImageFormat;\n  includeRawData?: boolean;\n}\n\nexport default class AlbumAPI extends BaseAPIWithImageSupport {\n\n  async getInfo(params: AlbumAPIGetInfoParams): Promise<Album> {\n    const imageConstants = await this.imageAPI.getConstants();\n    const opts = {\n      imageBaseUrl: imageConstants.baseUrl,\n      albumImageFormat: await this.imageAPI.getFormat(params.albumImageFormat, 9),\n      artistImageFormat: await this.imageAPI.getFormat(params.artistImageFormat, 21),\n      includeRawData: params.includeRawData !== undefined ? params.includeRawData : false\n    };\n    const html = await this.fetch(params.albumUrl);\n    return AlbumInfoParser.parseInfo(html, opts);\n  }\n}\n\nexport class LimiterAlbumAPI extends AlbumAPI {\n\n  #limiter: Limiter;\n\n  constructor(params: BaseAPIWithImageSupportParams & { limiter: Limiter }) {\n    super(params);\n    this.#limiter = params.limiter;\n  }\n\n  async getInfo(params: AlbumAPIGetInfoParams): Promise<Album> {\n    return this.#limiter.schedule(() => super.getInfo(params));\n  }\n}\n"]}