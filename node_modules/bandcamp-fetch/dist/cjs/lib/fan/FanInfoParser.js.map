{"version":3,"file":"FanInfoParser.js","sourceRoot":"","sources":["../../../../src/lib/fan/FanInfoParser.ts"],"names":[],"mappings":"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","sourcesContent":["import { load as cheerioLoad } from 'cheerio';\nimport { decode } from 'html-entities';\nimport type Fan from '../types/Fan.js';\nimport { type ImageFormat } from '../types/Image.js';\nimport { ParseError } from '../utils/Parse.js';\n\ninterface FanInfoParseOptions {\n  imageBaseUrl: string;\n  imageFormat: ImageFormat | null;\n}\n\nexport default class FanInfoParser {\n\n  static parseInfo(html: string, opts: FanInfoParseOptions): Fan {\n    const $ = cheerioLoad(html);\n    const blob = decode($('#pagedata[data-blob]').attr('data-blob'));\n    let parsed;\n    try {\n      parsed = JSON.parse(blob);\n    }\n    catch (error: any) {\n      throw new ParseError('Failed to parse fan info: JSON error in data-blob.', html, error);\n    }\n\n    const fanData = parsed.fan_data || {};\n    const fanId = fanData.fan_id;\n    if (!fanId || !fanData.name || !fanData.username) {\n      throw new ParseError('Failed to parse fan info: invalid data.', html);\n    }\n\n    const result: Fan = {\n      type: 'fan',\n      name: fanData.name || null,\n      username: fanData.username || null,\n      url: fanData.trackpipe_url,\n      description: fanData.bio || null,\n      location: fanData.location || null,\n      websiteUrl: fanData.website_url || null,\n      imageUrl: '',\n      followingGenresCount: fanData.following_genres_count || 0,\n      followingArtistsAndLabelsCount: fanData.following_bands_count || 0,\n      collectionItemCount: parsed.collection_data?.item_count || 0,\n      wishlistItemCount: parsed.wishlist_data?.item_count || 0\n    };\n\n    if (fanData.photo && fanData.photo.image_id && opts.imageFormat?.id) {\n      result.imageUrl = `${opts.imageBaseUrl}/img/${fanData.photo.image_id}_${opts.imageFormat.id}.jpg`;\n    }\n\n    return result;\n  }\n\n  static parseLoggedInFanUsername(html: string) {\n    const $ = cheerioLoad(html);\n    const blob = decode($('#pagedata[data-blob]').attr('data-blob'));\n    let parsed;\n    try {\n      parsed = JSON.parse(blob);\n    }\n    catch (error: any) {\n      throw new ParseError('Failed to parse logged-in fan username: JSON error in data-blob.', html, error);\n    }\n\n    const identitiesData = parsed.identities || {};\n    const username = identitiesData.fan?.username;\n    if (!username || typeof username !== 'string') {\n      let reason;\n      if (identitiesData.fan === null) {\n        reason = 'check if valid cookie is set';\n      }\n      else {\n        reason = 'invalid data';\n      }\n      throw new ParseError(`Failed to parse logged-in fan username: ${reason}.`, html);\n    }\n\n    return username;\n  }\n}\n"]}