"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _Limiter_limiter;
Object.defineProperty(exports, "__esModule", { value: true });
const bottleneck_1 = __importDefault(require("bottleneck"));
class Limiter {
    constructor() {
        _Limiter_limiter.set(this, void 0);
        __classPrivateFieldSet(this, _Limiter_limiter, new bottleneck_1.default({
            maxConcurrent: 5,
            minTime: 200
        }), "f");
    }
    updateSettings(options) {
        __classPrivateFieldGet(this, _Limiter_limiter, "f").updateSettings(options);
    }
    schedule(fn) {
        return __classPrivateFieldGet(this, _Limiter_limiter, "f").schedule(fn);
    }
}
_Limiter_limiter = new WeakMap();
exports.default = Limiter;
//# sourceMappingURL=Limiter.js.map