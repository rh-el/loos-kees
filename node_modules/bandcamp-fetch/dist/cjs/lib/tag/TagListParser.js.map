{"version":3,"file":"TagListParser.js","sourceRoot":"","sources":["../../../../src/lib/tag/TagListParser.ts"],"names":[],"mappings":";;AAAA,qCAA8C;AAI9C,MAAqB,aAAa;IAChC,MAAM,CAAC,SAAS,CAAC,IAAY;QAC3B,MAAM,CAAC,GAAG,IAAA,cAAW,EAAC,IAAI,CAAC,CAAC;QAE5B,MAAM,QAAQ,GAAG,CAAC,KAAa,EAAE,IAAY,EAAE,IAAyB,EAAE,EAAE;YAC1E,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,KAAK,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;QAChE,CAAC,CAAC;QAEF,MAAM,WAAW,GAAG,CAAC,QAAgB,EAAE,EAAE;YACvC,MAAM,KAAK,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC;YAC1B,MAAM,WAAW,GAAU,EAAE,CAAC;YAC9B,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;gBAC3C,MAAM,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;gBACvB,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;gBAClC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACjC,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;gBAC9D,MAAM,KAAK,GAAG,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;gBAClD,IAAI,KAAK,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,WAAW,CAAC,EAAE,CAAC,CAAC,+BAA+B;oBACjF,WAAW,CAAC,IAAI,CAAC;wBACf,IAAI,EAAE,KAAK;wBACX,IAAI;wBACJ,KAAK;qBACN,CAAC,CAAC;gBACL,CAAC;YACH,CAAC,CAAC,CAAC;YACH,OAAO,WAAW,CAAC;QACrB,CAAC,CAAC;QAEF,OAAO;YACL,IAAI,EAAE,WAAW,CAAC,2CAA2C,CAAC;YAC9D,SAAS,EAAE,WAAW,CAAC,qDAAqD,CAAC;SAC9E,CAAC;IACJ,CAAC;CACF;AAjCD,gCAiCC","sourcesContent":["import { load as cheerioLoad } from 'cheerio';\nimport {type TagList} from '../types/Tag.js';\nimport type Tag from '../types/Tag.js';\n\nexport default class TagListParser {\n  static parseTags(html: string): TagList {\n    const $ = cheerioLoad(html);\n\n    const _findTag = (value: string, name: string, tags: Omit<Tag, 'type'>[]) => {\n      return tags.find((t) => t.value === value && t.name === name);\n    };\n\n    const _parseCloud = (selector: string) => {\n      const cloud = $(selector);\n      const tagsInCloud: Tag[] = [];\n      cloud.find('a.g-pill').each((_index, link) => {\n        const linkEl = $(link);\n        const name = linkEl.text().trim();\n        const href = linkEl.attr('href');\n        const match = href ? (/\\/discover\\/(.+)\\?/).exec(href) : null;\n        const value = match && match[1] ? match[1] : null;\n        if (value && !_findTag(value, name, tagsInCloud)) { // Skip blank or repeating tags\n          tagsInCloud.push({\n            type: 'tag',\n            name,\n            value\n          });\n        }\n      });\n      return tagsInCloud;\n    };\n\n    return {\n      tags: _parseCloud('.discover-tags-pills .discover-tags-group'),\n      locations: _parseCloud('.discover-locations-pills .discover-locations-group')\n    };\n  }\n}\n"]}