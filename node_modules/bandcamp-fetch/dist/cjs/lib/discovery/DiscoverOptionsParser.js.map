{"version":3,"file":"DiscoverOptionsParser.js","sourceRoot":"","sources":["../../../../src/lib/discovery/DiscoverOptionsParser.ts"],"names":[],"mappings":"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","sourcesContent":["import { load as cheerioLoad } from 'cheerio';\nimport { ParseError } from '../utils/Parse.js';\nimport { type DiscoverOptions } from '../types/Discovery.js';\n\nexport default class DiscoverOptionsParser {\n  static parseOptions(html: string): DiscoverOptions {\n    const $ = cheerioLoad(html);\n    const blob = $('#DiscoverApp[data-blob]').attr('data-blob');\n    if (!blob) {\n      throw new ParseError('Failed to parse discover options: blob not found in data.', html);\n    }\n    let parsed;\n    try {\n      parsed = JSON.parse(blob);\n    }\n    catch (error: any) {\n      throw new ParseError('Failed to parse discover options: JSON error.', blob, error);\n    }\n\n    const options = parsed?.appData?.initialState;\n    if (options && typeof options === 'object') {\n      const result: DiscoverOptions = {\n        categories: [],\n        genres: [],\n        subgenres: {},\n        customTags: [],\n        sortBys: [],\n        locations: [],\n        times: []\n      };\n      if (Array.isArray(options.categories)) {\n        result.categories = options.categories.map((cat: any) => ({ name: cat.label, value: cat.id, slug: cat.slug }));\n      }\n      if (Array.isArray(options.genres)) {\n        result.genres = options.genres.map((genre: any) => ({ name: genre.label, value: genre.slug, id: genre.id }));\n      }\n      if (Array.isArray(options.categories)) {\n        result.categories = options.categories.map((cat: any) => ({ name: cat.label, value: cat.id, slug: cat.slug }));\n      }\n      if (Array.isArray(options.slices)) {\n        result.sortBys = options.slices.map((s: any) => ({ name: s.label, value: s.slug }));\n      }\n      if (Array.isArray(options.locations)) {\n        result.locations = options.locations.map((loc: any) => ({ name: loc.label, value: loc.id }));\n      }\n      if (Array.isArray(options.times)) {\n        result.times = options.times.map((t: any) => ({ name: t.label, value: t.id, slug: t.slug }));\n      }\n      if (Array.isArray(options.subgenres)) {\n        for (const { id, label, slug, parentSlug } of options.subgenres) {\n          if (id !== undefined && parentSlug && label && slug) {\n            if (!result.subgenres[parentSlug]) {\n              result.subgenres[parentSlug] = [];\n            }\n            result.subgenres[parentSlug].push({ name: label, value: slug, id });\n          }\n        }\n      }\n      return result;\n    }\n\n    throw new ParseError('Failed to parse discover options: blob is missing or has invalid \\'appData.initialState\\' field.', parsed);\n  }\n}\n"]}