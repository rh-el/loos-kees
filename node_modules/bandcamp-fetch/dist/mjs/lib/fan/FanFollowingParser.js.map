{"version":3,"file":"FanFollowingParser.js","sourceRoot":"","sources":["../../../../src/lib/fan/FanFollowingParser.ts"],"names":[],"mappings":"AAGA,OAAO,kBAAgD,MAAM,yBAAyB,CAAC;AAEvF,MAAM,CAAC,OAAO,OAAO,kBAAmB,SAAQ,kBAAkB;IAEhE,MAAM,CAAC,2BAA2B,CAAC,IAAY,EAAE,IAAyB;QACxE,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE;YAC/B,GAAG,IAAI;YACP,OAAO,EAAE,iBAAiB;YAC1B,WAAW,EAAE,IAAI,CAAC,kBAAkB;SACrC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,mCAAmC,CAAC,IAAS,EAAE,YAAkC,EAAE,IAAyB;QACjH,OAAO,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,YAAY,EAAE;YACrD,GAAG,IAAI;YACP,OAAO,EAAE,YAAY;YACrB,WAAW,EAAE,IAAI,CAAC,kBAAkB;SACrC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,kBAAkB,CAAC,IAAS,EAAE,IAAyB;QAC5D,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,IAAI,GAAa;YACrB,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,IAAI;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,IAAI,EAAE;SAC9B,CAAC;QACF,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;YAC/C,IAAI,CAAC,GAAG,GAAG,WAAW,IAAI,CAAC,SAAS,CAAC,SAAS,eAAe,CAAC;QAChE,CAAC;QACD,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,EAAE,CAAC;YAC1C,IAAI,CAAC,QAAQ,GAAG,GAAG,IAAI,CAAC,YAAY,QAAQ,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,WAAW,CAAC,EAAE,MAAM,CAAC;QACzF,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,4BAA4B,CAAC,IAAY,EAAE,IAAyB;QACzE,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE;YAC/B,GAAG,IAAI;YACP,OAAO,EAAE,kBAAkB;YAC3B,WAAW,EAAE,IAAI,CAAC,mBAAmB;SACtC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,oCAAoC,CAAC,IAAS,EAAE,YAAkC,EAAE,IAAyB;QAClH,OAAO,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,YAAY,EAAE;YACrD,GAAG,IAAI;YACP,OAAO,EAAE,YAAY;YACrB,WAAW,EAAE,IAAI,CAAC,mBAAmB;SACtC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,mBAAmB,CAAC,IAAS,EAAE,IAAyB;QAC7D,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,KAAK,GAAQ;YACjB,IAAI,EAAE,KAAK;YACX,IAAI,EAAE,IAAI,CAAC,YAAY;YACvB,KAAK,EAAE,IAAI,CAAC,KAAK;SAClB,CAAC;QACF,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,EAAE,CAAC;YACxD,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,KAAa,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,YAAY,SAAS,KAAK,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,CAAC,CAAC;QAC1H,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF","sourcesContent":["import { type FanItemsContinuation } from '../types/Fan.js';\nimport type Tag from '../types/Tag.js';\nimport type UserKind from '../types/UserKind.js';\nimport FanItemsBaseParser, { type FanItemParseOptions } from './FanItemsBaseParser.js';\n\nexport default class FanFollowingParser extends FanItemsBaseParser {\n\n  static parseFollowingBandsFromPage(html: string, opts: FanItemParseOptions) {\n    return this.parsePageItems(html, {\n      ...opts,\n      dataKey: 'following_bands',\n      parseItemFn: this.parseFollowingBand\n    });\n  }\n\n  static parseFollowingBandsFromContinuation(json: any, continuation: FanItemsContinuation, opts: FanItemParseOptions) {\n    return this.parseContinuationItems(json, continuation, {\n      ...opts,\n      dataKey: 'followeers',\n      parseItemFn: this.parseFollowingBand\n    });\n  }\n\n  static parseFollowingBand(data: any, opts: FanItemParseOptions) {\n    if (!data) {\n      return null;\n    }\n\n    const band: UserKind = {\n      name: data.name || null,\n      location: data.location || ''\n    };\n    if (data.url_hints && data.url_hints.subdomain) {\n      band.url = `https://${data.url_hints.subdomain}.bandcamp.com`;\n    }\n    if (data.image_id && opts.imageFormat?.id) {\n      band.imageUrl = `${opts.imageBaseUrl}/img/${data.image_id}_${opts.imageFormat.id}.jpg`;\n    }\n\n    return band;\n  }\n\n  static parseFollowingGenresFromPage(html: string, opts: FanItemParseOptions) {\n    return this.parsePageItems(html, {\n      ...opts,\n      dataKey: 'following_genres',\n      parseItemFn: this.parseFollowingGenre\n    });\n  }\n\n  static parseFollowingGenresFromContinuation(json: any, continuation: FanItemsContinuation, opts: FanItemParseOptions) {\n    return this.parseContinuationItems(json, continuation, {\n      ...opts,\n      dataKey: 'followeers',\n      parseItemFn: this.parseFollowingGenre\n    });\n  }\n\n  static parseFollowingGenre(data: any, opts: FanItemParseOptions) {\n    if (!data) {\n      return null;\n    }\n\n    const genre: Tag = {\n      type: 'tag',\n      name: data.display_name,\n      value: data.token\n    };\n    if (Array.isArray(data.art_ids) && opts.imageFormat?.id) {\n      genre.imageUrls = data.art_ids.map((artId: number) => `${opts.imageBaseUrl}/img/a${artId}_${opts.imageFormat?.id}.jpg`);\n    }\n\n    return genre;\n  }\n}\n"]}