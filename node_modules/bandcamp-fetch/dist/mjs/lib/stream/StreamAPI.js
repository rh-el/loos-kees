var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _LimiterStreamAPI_limiter;
import BaseAPI from '../common/BaseAPI.js';
import { URLS } from '../utils/Constants.js';
import { FetchMethod } from '../utils/Fetcher.js';
export default class StreamAPI extends BaseAPI {
    async test(url) {
        return this.fetch(url, false, FetchMethod.HEAD);
    }
    async refresh(url) {
        const refreshUrl = new URL(URLS.REFRESH_STREAM);
        refreshUrl.searchParams.set('url', url);
        const res = await this.fetch(refreshUrl.toString(), true);
        if (res && res.url && typeof res.url === 'string') {
            return res.url;
        }
        return null;
    }
}
export class LimiterStreamAPI extends StreamAPI {
    constructor(params) {
        super(params);
        _LimiterStreamAPI_limiter.set(this, void 0);
        __classPrivateFieldSet(this, _LimiterStreamAPI_limiter, params.limiter, "f");
    }
    async refresh(url) {
        return __classPrivateFieldGet(this, _LimiterStreamAPI_limiter, "f").schedule(() => super.refresh(url));
    }
}
_LimiterStreamAPI_limiter = new WeakMap();
//# sourceMappingURL=StreamAPI.js.map