{"version":3,"file":"AutocompleteAPI.js","sourceRoot":"","sources":["../../../../src/lib/autocomplete/AutocompleteAPI.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,uBAAuB,CAAC;AAE7C,OAAO,yBAAyB,MAAM,gCAAgC,CAAC;AAEvE,OAAO,OAA+B,MAAM,sBAAsB,CAAC;AACnE,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAElD,MAAM,CAAN,IAAY,oBAGX;AAHD,WAAY,oBAAoB;IAC9B,mCAAW,CAAA;IACX,6CAAqB,CAAA;AACvB,CAAC,EAHW,oBAAoB,KAApB,oBAAoB,QAG/B;AAWD,MAAM,CAAC,OAAO,OAAO,eAAgB,SAAQ,OAAO;IAKlD,cAAc,CAAC,MAA2C;QACxD,IAAI,MAAM,CAAC,QAAQ,KAAK,oBAAoB,CAAC,GAAG,EAAE,CAAC;YACjD,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QAC1C,CAAC;QAED,OAAO,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC;IAC/C,CAAC;IAED;;OAEG;IACO,KAAK,CAAC,mBAAmB,CAAC,MAAoF;QACtH,MAAM,OAAO,GAAG;YACd,MAAM,EAAE,MAAM,CAAC,KAAK;SACrB,CAAC;QAEF,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,EAAE,WAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QACtF,OAAO,yBAAyB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC;IAED;;OAEG;IACO,KAAK,CAAC,wBAAwB,CAAC,MAAyF;QAChI,MAAM,OAAO,GAAG;YACd,CAAC,EAAE,MAAM,CAAC,KAAK;YACf,CAAC,EAAE,MAAM,CAAC,KAAK,IAAI,CAAC;YACpB,iBAAiB,EAAE,IAAI;SACxB,CAAC;QAEF,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,EAAE,WAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC3F,OAAO,yBAAyB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACxD,CAAC;CACF;AAED,MAAM,OAAO,sBAAuB,SAAQ,eAAe;IAIzD,YAAY,MAA4C;QACtD,KAAK,CAAC,MAAM,CAAC,CAAC;QAHhB,kDAAkB;QAIhB,uBAAA,IAAI,mCAAY,MAAM,CAAC,OAAO,MAAA,CAAC;IACjC,CAAC;IAKD,cAAc,CAAC,MAA2C;QACxD,OAAO,uBAAA,IAAI,uCAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;IACpE,CAAC;CACF","sourcesContent":["import { URLS } from '../utils/Constants.js';\nimport { type AutoCompleteTag, type AutocompleteLocation } from '../types/Autocomplete.js';\nimport AutocompleteResultsParser from './AutocompleteResultsParser.js';\nimport type Limiter from '../utils/Limiter.js';\nimport BaseAPI, { type BaseAPIParams } from '../common/BaseAPI.js';\nimport { FetchMethod } from '../utils/Fetcher.js';\n\nexport enum AutocompleteItemType {\n  Tag = 'Tag',\n  Location = 'Location'\n}\n\nexport type AutocompleteAPIGetSuggestionsParams = {\n  query: string;\n  itemType: AutocompleteItemType.Location;\n  limit?: number;\n} | {\n  query: string;\n  itemType: AutocompleteItemType.Tag;\n};\n\nexport default class AutocompleteAPI extends BaseAPI {\n\n  getSuggestions(params: AutocompleteAPIGetSuggestionsParams & { itemType: AutocompleteItemType.Location }): Promise<AutocompleteLocation[]>;\n  getSuggestions(params: AutocompleteAPIGetSuggestionsParams & { itemType: AutocompleteItemType.Tag }): Promise<AutoCompleteTag[]>;\n  getSuggestions(params: AutocompleteAPIGetSuggestionsParams): Promise<AutoCompleteTag[] | AutocompleteLocation[]>;\n  getSuggestions(params: AutocompleteAPIGetSuggestionsParams): Promise<any> {\n    if (params.itemType === AutocompleteItemType.Tag) {\n      return this.getAutocompleteTags(params);\n    }\n\n    return this.getAutocompleteLocations(params);\n  }\n\n  /**\n   * @internal\n   */\n  protected async getAutocompleteTags(params: AutocompleteAPIGetSuggestionsParams & { itemType: AutocompleteItemType.Tag }) {\n    const payload = {\n      prefix: params.query\n    };\n\n    const json = await this.fetch(URLS.AUTOCOMPLETE.TAG, true, FetchMethod.POST, payload);\n    return AutocompleteResultsParser.parseTags(json);\n  }\n\n  /**\n   * @internal\n   */\n  protected async getAutocompleteLocations(params: AutocompleteAPIGetSuggestionsParams & { itemType: AutocompleteItemType.Location }) {\n    const payload = {\n      q: params.query,\n      n: params.limit || 5,\n      geocoder_fallback: true\n    };\n\n    const json = await this.fetch(URLS.AUTOCOMPLETE.LOCATION, true, FetchMethod.POST, payload);\n    return AutocompleteResultsParser.parseLocations(json);\n  }\n}\n\nexport class LimiterAutocompleteAPI extends AutocompleteAPI {\n\n  #limiter: Limiter;\n\n  constructor(params: BaseAPIParams & { limiter: Limiter }) {\n    super(params);\n    this.#limiter = params.limiter;\n  }\n\n  getSuggestions(params: AutocompleteAPIGetSuggestionsParams & { itemType: AutocompleteItemType.Location; }): Promise<AutocompleteLocation[]>;\n  getSuggestions(params: AutocompleteAPIGetSuggestionsParams & { itemType: AutocompleteItemType.Tag; }): Promise<AutoCompleteTag[]>;\n  getSuggestions(params: AutocompleteAPIGetSuggestionsParams): Promise<AutocompleteLocation[] | AutoCompleteTag[]>;\n  getSuggestions(params: AutocompleteAPIGetSuggestionsParams): Promise<any> {\n    return this.#limiter.schedule(() => super.getSuggestions(params));\n  }\n}\n"]}