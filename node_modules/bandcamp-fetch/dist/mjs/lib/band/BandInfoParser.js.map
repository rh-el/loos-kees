{"version":3,"file":"BandInfoParser.js","sourceRoot":"","sources":["../../../../src/lib/band/BandInfoParser.ts"],"names":[],"mappings":"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","sourcesContent":["import { load as cheerioLoad } from 'cheerio';\nimport { decode } from 'html-entities';\nimport type Artist from '../types/Artist.js';\nimport { type ImageFormat } from '../types/Image.js';\nimport type Label from '../types/Label.js';\nimport { ParseError, brToNewLine, parseLabelFromBackToLabelLink, reformatImageUrl, stripLineBreaks, stripTags } from '../utils/Parse.js';\n\ninterface BandInfoParseOptions {\n  bandUrl: string;\n  imageFormat: ImageFormat | null;\n}\n\nexport default class BandInfoParser {\n  static parseInfo(html: string, opts: BandInfoParseOptions): Artist | Label {\n    const $ = cheerioLoad(html);\n    let bandData;\n    try {\n      bandData = JSON.parse(decode($('script[data-band]').attr('data-band')));\n    }\n    catch (error: any) {\n      throw new ParseError('Failed to parse artist / label info: JSON error in band data.', html, error);\n    }\n\n    const bioText = $('#bio-text');\n    let description;\n    if (bioText.length) {\n      const bioTextMore = bioText.find('.peekaboo-text');\n      if (bioTextMore.length) {\n        bioTextMore.find('.lightweightBreak').remove();\n        bioText.find('.peekaboo-text, .peekaboo-link').remove();\n        description = (`${bioText.html()?.trim()} ${bioTextMore.html()}`).trim();\n      }\n      else {\n        description = bioText.html()?.trim();\n      }\n      if (description) {\n        description = stripLineBreaks(description);\n        description = brToNewLine(description);\n        description = stripTags(description);\n        description = decode(description);\n      }\n    }\n\n    const isLabel = bandData.is_label;\n    const result: Artist | Label = {\n      type: isLabel ? 'label' : 'artist',\n      name: bandData.name,\n      description: description\n    };\n\n    if (bandData.url) {\n      result.url = bandData.url;\n    }\n\n    const location = $('#band-name-location').find('.location').text();\n    if (location) {\n      result.location = location;\n    }\n\n    const imageUrl = reformatImageUrl($('img.band-photo').attr('src'), opts.imageFormat);\n    if (imageUrl) {\n      result.imageUrl = imageUrl;\n    }\n\n    if (!isLabel) {\n      const label = parseLabelFromBackToLabelLink($);\n      if (label) {\n        (result as Artist).label = label;\n      }\n    }\n    else {\n      (result as Label).labelId = bandData.id;\n    }\n\n    return result;\n  }\n}"]}