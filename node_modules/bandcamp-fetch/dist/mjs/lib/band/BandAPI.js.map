{"version":3,"file":"BandAPI.js","sourceRoot":"","sources":["../../../../src/lib/band/BandAPI.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseAPIWithImageSupport, { type BaseAPIWithImageSupportParams } from '../common/BaseAPIWithImageSupport.js';\nimport type Album from '../types/Album.js';\nimport type Artist from '../types/Artist.js';\nimport { type ImageFormat } from '../types/Image.js';\nimport {type LabelArtist} from '../types/Label.js';\nimport type Label from '../types/Label.js';\nimport type Track from '../types/Track.js';\nimport type Limiter from '../utils/Limiter.js';\nimport { normalizeUrl } from '../utils/Parse.js';\nimport BandInfoParser from './BandInfoParser.js';\nimport DiscographyParser from './DiscographyParser.js';\nimport LabelArtistsParser from './LabelArtistsParser.js';\n\nexport interface BandAPIGetDiscographyParams {\n  bandUrl: string;\n  imageFormat?: string | number | ImageFormat;\n}\n\nexport interface BandAPIGetInfoParams {\n  bandUrl: string;\n  imageFormat?: string | number | ImageFormat;\n  labelId?: number;\n}\n\nexport interface BandAPIGetLabelArtistsParams {\n  labelUrl: string;\n  imageFormat?: string | number | ImageFormat;\n}\n\nexport default class BandAPI extends BaseAPIWithImageSupport {\n\n  async getDiscography(params: BandAPIGetDiscographyParams): Promise<Array<Album | Track>> {\n    const imageConstants = await this.imageAPI.getConstants();\n    const opts = {\n      imageBaseUrl: imageConstants.baseUrl,\n      bandUrl: params.bandUrl,\n      imageFormat: await this.imageAPI.getFormat(params.imageFormat, 9)\n    };\n    const html = await this.fetch(normalizeUrl('music', params.bandUrl));\n    return DiscographyParser.parseDiscography(html, opts);\n  }\n\n  async getInfo(params: BandAPIGetInfoParams): Promise<Artist | Label> {\n    const opts = {\n      bandUrl: params.bandUrl,\n      imageFormat: await this.imageAPI.getFormat(params.imageFormat, 21)\n    };\n\n    const url = BandAPI.getUrl(params.bandUrl);\n    const html = await this.fetch(url);\n    const result = BandInfoParser.parseInfo(html, opts);\n    // Return if result is complete\n    if (BandAPI.isInfoComplete(result)) {\n      return result;\n    }\n\n    // Info lacking name or label (for artist) - try getting them from music page\n    const musicUrl = BandAPI.getUrl(params.bandUrl, 'music');\n    const musicHtml = await this.fetch(musicUrl);\n    const info = BandInfoParser.parseInfo(musicHtml, opts);\n    BandAPI.fillInfo(result, info);\n    // Return if result is complete\n    if (BandAPI.isInfoComplete(result)) {\n      return result;\n    }\n\n    // Info is still lacking name or label (for artist) - last try with fetching\n    // From discog's first album or track\n    const discogItems = await this.getDiscography(params);\n    if (discogItems[0]) {\n      const url = discogItems[0]?.url;\n      if (url) {\n        const html = await this.fetch(url);\n        const info = BandInfoParser.parseInfo(html, opts);\n        BandAPI.fillInfo(result, info);\n      }\n    }\n\n    if (result.url === null) {\n      result.url = params.bandUrl;\n    }\n\n    return result;\n  }\n\n  async getLabelArtists(params: BandAPIGetLabelArtistsParams): Promise<LabelArtist[]> {\n    const opts = {\n      labelUrl: params.labelUrl,\n      imageFormat: await this.imageAPI.getFormat(params.imageFormat)\n    };\n\n    const html = await this.fetch(normalizeUrl('artists', params.labelUrl));\n    return LabelArtistsParser.parseLabelArtists(html, opts);\n  }\n\n  /**\n   * @internal\n   */\n  protected static getUrl(artistOrLabelUrl: string, path?: string, labelId?: string): string {\n    let url = path ? normalizeUrl(path, artistOrLabelUrl) : artistOrLabelUrl;\n    if (labelId) {\n      url += `/?label=${encodeURIComponent(labelId)}`;\n    }\n    return url;\n  }\n\n  /**\n   * @internal\n   */\n  protected static isInfoComplete(data: Artist | Label) {\n    return data.name && data.url &&\n      (data.type === 'label' || data.label);\n  }\n\n  /**\n   * @internal\n   */\n  protected static fillInfo<T extends Artist | Label>(target: T, src: T): T {\n    if (target.name === null) {\n      target.name = src.name;\n    }\n    if (target.url === null) {\n      target.url = src.url;\n    }\n    if (target.type === 'artist' && src.type === 'artist' && !target.label && src.label) {\n      target.label = src.label;\n    }\n\n    return target;\n  }\n}\n\nexport class LimiterBandAPI extends BandAPI {\n\n  #limiter: Limiter;\n\n  constructor(params: BaseAPIWithImageSupportParams & { limiter: Limiter }) {\n    super(params);\n    this.#limiter = params.limiter;\n  }\n\n  async getDiscography(params: BandAPIGetDiscographyParams): Promise<(Album | Track)[]> {\n    return this.#limiter.schedule(() => super.getDiscography(params));\n  }\n\n  async getInfo(params: BandAPIGetInfoParams): Promise<Artist | Label> {\n    return this.#limiter.schedule(() => super.getInfo(params));\n  }\n\n  async getLabelArtists(params: BandAPIGetLabelArtistsParams): Promise<LabelArtist[]> {\n    return this.#limiter.schedule(() => super.getLabelArtists(params));\n  }\n}\n"]}