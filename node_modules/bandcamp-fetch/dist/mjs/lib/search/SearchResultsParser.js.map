{"version":3,"file":"SearchResultsParser.js","sourceRoot":"","sources":["../../../../src/lib/search/SearchResultsParser.ts"],"names":[],"mappings":"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","sourcesContent":["import { load as cheerioLoad } from 'cheerio';\nimport { type ImageFormat } from '../types/Image.js';\nimport { reformatImageUrl, stripLineBreaks, stripMultipleWhitespaces, substrAfter, substrBefore } from '../utils/Parse.js';\nimport { type SearchResultAlbum, type SearchResultAny, type SearchResultArtist, type SearchResultFan, type SearchResultItem, type SearchResultLabel, type SearchResultTrack, type SearchResults } from '../types/Search.js';\nimport { SearchItemType } from './SearchAPI.js';\n\nconst VALID_RESULT_TYPES = [ 'artist', 'label', 'album', 'track', 'fan' ];\n\ninterface SearchResultsParseOptions {\n  itemType: SearchItemType;\n  albumImageFormat: ImageFormat | null;\n  artistImageFormat: ImageFormat | null;\n}\n\nexport default class SearchResultsParser {\n\n  static parseResults(html: string, opts: SearchResultsParseOptions): SearchResults<SearchResultAny> {\n    const $ = cheerioLoad(html);\n    const resultsList = $('li.searchresult');\n    const items: Array<SearchResultAny> = [];\n    resultsList.each((i, resultListItem: any) => {\n      resultListItem = $(resultListItem);\n      const resultInfo = resultListItem.find('.result-info');\n\n      // Common info\n      const resultType = resultInfo.children('.itemtype').text().trim().toLowerCase();\n      const imgSrc = $('.art img', resultListItem).attr('src');\n      const heading = $('.heading a', resultInfo);\n      const name = heading.text().trim();\n      const url = resultInfo.find('.itemurl').text().trim();\n      const imageUrl = reformatImageUrl(imgSrc, resultType === 'album' || resultType === 'track' ? opts.albumImageFormat : opts.artistImageFormat);\n\n      if (!this.#matchSearchItemTypeWithResult(opts.itemType, resultType) || !name || !url) {\n        return true;\n      }\n\n      // Other info\n      let location, genre, tags, artist, numTracks, duration, releaseDate, album;\n      resultInfo.find('.subhead, .genre, .tags, .released, .length').each((i: number, info: any) => {\n        info = $(info);\n        if (info.hasClass('subhead')) {\n          if (resultType === 'artist' || resultType === 'label') {\n            location = info.text().trim();\n          }\n          else if (resultType === 'album' || resultType === 'track') {\n            const infoText = info.text();\n            artist = substrAfter(infoText, 'by ')?.trim();\n\n            if (resultType === 'track') {\n              album = substrBefore(infoText, ' by');\n              if (album) {\n                album = substrAfter(album, 'from ')?.trim();\n              }\n            }\n          }\n          return true;\n        }\n        if (info.hasClass('genre')) {\n          genre = substrAfter(info.text(), 'genre: ')?.trim();\n          return true;\n        }\n        if (info.hasClass('tags')) {\n          tags = substrAfter(info.text(), 'tags:');\n          if (tags) {\n            tags = stripLineBreaks(stripMultipleWhitespaces(tags)).trim();\n          }\n          return true;\n        }\n        if (info.hasClass('released')) {\n          releaseDate = substrAfter(info.text(), 'released ')?.trim();\n          return true;\n        }\n        if (info.hasClass('length')) {\n          const lengthParts = info.text().split(',');\n          const tracksText = lengthParts[0];\n          const minutesText = lengthParts[1];\n          const numTracksStr = tracksText ? substrBefore(tracksText, 'tracks') : null;\n          if (numTracksStr) {\n            numTracks = parseInt(numTracksStr, 10);\n          }\n          const durationStr = minutesText ? substrBefore(minutesText, 'minutes') : null;\n          if (durationStr) {\n            duration = parseInt(durationStr, 10) * 60;\n          }\n        }\n      });\n\n      const base: Omit<SearchResultItem, 'type'> = {\n        name: heading.text().trim(),\n        url: resultInfo.find('.itemurl').text().trim() || ''\n      };\n      if (imageUrl) {\n        base.imageUrl = imageUrl;\n      }\n\n      if (resultType === 'artist') {\n        const artist: SearchResultArtist = {\n          type: 'artist',\n          ...base\n        };\n        if (location) artist.location = location;\n        if (genre) artist.genre = genre;\n        if (tags) artist.tags = tags;\n        items.push(artist);\n      }\n      else if (resultType === 'label') {\n        const label: SearchResultLabel = {\n          type: 'label',\n          ...base\n        };\n        if (location) label.location = location;\n        items.push(label);\n      }\n      else if (resultType === 'album') {\n        const album: SearchResultAlbum = {\n          type: 'album',\n          ...base\n        };\n        if (artist) album.artist = artist;\n        if (numTracks) album.numTracks = numTracks;\n        if (duration) album.duration = duration;\n        if (releaseDate) album.releaseDate = releaseDate;\n        if (tags) album.tags = tags;\n        items.push(album);\n      }\n      else if (resultType === 'track') {\n        const track: SearchResultTrack = {\n          type: 'track',\n          ...base\n        };\n        if (artist) track.artist = artist;\n        if (album) track.album = album;\n        if (releaseDate) track.releaseDate = releaseDate;\n        if (tags) track.tags = tags;\n        items.push(track);\n      }\n      else if (resultType === 'fan') {\n        const fan: SearchResultFan = {\n          type: 'fan',\n          ...base\n        };\n        if (genre) fan.genre = genre;\n        items.push(fan);\n      }\n    });\n\n    let totalPages = parseInt($('.pagelist').find('.pagenum').last().text(), 10);\n    if (isNaN(totalPages)) {\n      totalPages = 1;\n    }\n\n    return {\n      items,\n      totalPages\n    };\n  }\n\n  static #matchSearchItemTypeWithResult(searchType: SearchItemType, resultType: string) {\n    if (searchType === SearchItemType.All && VALID_RESULT_TYPES.includes(resultType)) {\n      return true;\n    }\n\n    switch (searchType) {\n      case SearchItemType.ArtistsAndLabels:\n        return resultType === 'artist' || resultType === 'label';\n      case SearchItemType.Albums:\n        return resultType === 'album';\n      case SearchItemType.Tracks:\n        return resultType === 'track';\n      case SearchItemType.Fans:\n        return resultType === 'fan';\n      default:\n        return false;\n    }\n  }\n}\n"]}