{"version":3,"file":"ShowParser.js","sourceRoot":"","sources":["../../../../src/lib/show/ShowParser.ts"],"names":[],"mappings":"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","sourcesContent":["import { load as cheerioLoad } from 'cheerio';\nimport { decode } from 'html-entities';\nimport { type ImageFormat } from '../types/Image.js';\nimport type Show from '../types/Show.js';\nimport { ParseError, splitUrl } from '../utils/Parse.js';\nimport { URLS } from '../utils/Constants.js';\nimport type Track from '../types/Track.js';\n\ninterface ShowParseOptions {\n  showUrl: string,\n  imageBaseUrl: string,\n  albumImageFormat?: ImageFormat | null;\n  artistImageFormat?: ImageFormat | null;\n  showImageFormat?: ImageFormat | null;\n}\n\nexport default class ShowParser {\n  static parseShow(html: string, opts: ShowParseOptions): Show {\n    const $ = cheerioLoad(html);\n    const blob = decode($('#pagedata[data-blob]').attr('data-blob'));\n    let parsed;\n    try {\n      parsed = JSON.parse(blob);\n    }\n    catch (error: any) {\n      throw new ParseError('Failed to parse show: JSON error in data-blob.', html, error);\n    }\n\n    if (typeof parsed === 'object' && parsed.bcw_data) {\n      const showId = this.#getShowIdFromUrl(opts.showUrl);\n      let showInfo;\n      if (showId !== null) {\n        showInfo = parsed.bcw_data?.[showId];\n      }\n      if (showInfo) {\n        const show: Show = {\n          type: 'show',\n          name: showInfo.title,\n          url: this.#getShowUrl(showInfo.show_id),\n          publishedDate: showInfo.published_date,\n          description: showInfo.desc,\n          shortDescription: showInfo.short_desc,\n          imageCaption: showInfo.image_caption,\n          subtitle: showInfo.subtitle,\n          duration: showInfo.audio_duration,\n          screenImageUrl: `${opts.imageBaseUrl}/img/${showInfo.show_v2_image_id}_0`\n        };\n        const mp3StreamUrl = showInfo.audio_stream?.['mp3-128'];\n        const opusStreamUrl = showInfo.audio_stream?.['opus-lo'];\n        if (mp3StreamUrl || opusStreamUrl) {\n          show.streamUrl = {};\n          if (mp3StreamUrl) {\n            show.streamUrl['mp3-128'] = mp3StreamUrl;\n          }\n          if (opusStreamUrl) {\n            show.streamUrl['opus-lo'] = opusStreamUrl;\n          }\n        }\n        if (opts.showImageFormat?.id) {\n          show.imageUrl = `${opts.imageBaseUrl}/img/${showInfo.show_v2_image_id}_${opts.showImageFormat.id}.jpg`;\n        }\n        show.tracks = showInfo.tracks.map((track: any) => {\n          const trackItem: Omit<Track, 'type'> = {\n            id: track.track_id,\n            name: track.title,\n            url: track.track_url,\n            seekPosition: track.timecode,\n            artist: {\n              name: track.artist,\n              url: `https://${track.url_hints.subdomain}.bandcamp.com`,\n              location: track.location_text\n            }\n          };\n          if (opts.albumImageFormat?.id) {\n            trackItem.imageUrl = `${opts.imageBaseUrl}/img/a${track.track_art_id}_${opts.albumImageFormat.id}.jpg`;\n          }\n          if (opts.artistImageFormat?.id && trackItem.artist) {\n            trackItem.artist.imageUrl = `${opts.imageBaseUrl}/img/${track.bio_image_id}_${opts.artistImageFormat.id}.jpg`;\n          }\n          if (track.album_title) {\n            trackItem.album = {\n              id: track.album_id,\n              name: track.album_title,\n              url: track.album_url\n            };\n          }\n          return trackItem;\n        });\n\n        return show;\n      }\n    }\n\n    throw new ParseError('Failed to parse show: missing bcw_data.', html);\n  }\n\n  static #getShowIdFromUrl(showUrl: string) {\n    const params = splitUrl(showUrl).searchParams;\n    return params.get('show');\n  }\n\n  static #getShowUrl(showId: string): string {\n    return `${URLS.SITE_URL}/?show=${showId}`;\n  }\n}"]}