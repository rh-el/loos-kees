{"version":3,"file":"Fetcher.js","sourceRoot":"","sources":["../../../../src/lib/utils/Fetcher.ts"],"names":[],"mappings":"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","sourcesContent":["import { URL } from 'url';\nimport type Cache from './Cache.js';\nimport { CacheDataType } from './Cache.js';\n\nexport enum FetchMethod {\n  GET = 'GET',\n  POST = 'POST',\n  HEAD = 'HEAD'\n}\n\nexport interface FetcherParams {\n  cookie?: string | null;\n  cache: Cache;\n}\n\nexport default class Fetcher {\n\n  #cookie?: string | null;\n  #cache: Cache;\n\n  constructor(params: FetcherParams) {\n    this.#cache = params.cache;\n    this.setCookie(params.cookie);\n  }\n\n  setCookie(value?: string | null) {\n    this.#cookie = value;\n    const valueChanged = ((this.#cookie || null) !== (value || null));\n    if (valueChanged) {\n      this.#cache.clear();\n    }\n  }\n\n  get cookie() {\n    return this.#cookie;\n  }\n\n  fetch(url: string, jsonResponse: false, method: FetchMethod.HEAD, payload?: undefined): Promise<{ ok: boolean, status: number }>;\n  fetch(url: string, jsonResponse: true, method?: FetchMethod, payload?: Record<string, any>): Promise<any>;\n  fetch(url: string, jsonResponse?: boolean, method?: FetchMethod, payload?: Record<string, any>): Promise<string>;\n  fetch(url: string, jsonResponse?: boolean, method?: FetchMethod, payload?: Record<string, any>) {\n    if (jsonResponse === undefined) {\n      jsonResponse = false;\n    }\n    return this.#cache.getOrSet(CacheDataType.Page, getCacheKey(url, jsonResponse, payload), async () => {\n      if (method === undefined) {\n        method = FetchMethod.GET;\n      }\n\n      if (method === FetchMethod.HEAD) {\n        const response = await fetch(url, { method: 'HEAD' });\n        return {\n          ok: response.ok,\n          status: response.status\n        };\n      }\n\n      let response;\n      if (method === FetchMethod.GET) {\n        const urlObj = new URL(url);\n        if (payload) {\n          for (const [ key, value ] of Object.entries(payload)) {\n            urlObj.searchParams.set(key, value);\n          }\n        }\n        try {\n          const request = new Request(urlObj.toString());\n          if (this.#cookie) {\n            request.headers.set('Cookie', this.#cookie);\n          }\n          response = await fetch(request);\n        }\n        catch (error) {\n          throw new FetchError(error);\n        }\n      }\n      else {\n        const init: RequestInit = {\n          method: 'POST',\n          body: payload ? JSON.stringify(payload) : undefined\n        };\n        const request = new Request(url);\n        request.headers.set('Content-Type', 'application/json');\n        if (this.#cookie) {\n          request.headers.set('Cookie', this.#cookie);\n        }\n        try {\n          response = await fetch(request, init);\n        }\n        catch (error) {\n          throw new FetchError(error);\n        }\n      }\n      if (response.status === 429) {\n        throw new FetchError({\n          message: '429 Too Many Requests',\n          code: 429\n        });\n      }\n      if (jsonResponse) {\n        return response.json();\n      }\n      return response.text();\n    });\n  }\n\n}\n\nfunction getCacheKey(url: string, jsonResponse: boolean, payload?: Record<string, any>): string {\n  return url + (jsonResponse ? ':json' : ':html') +\n    (payload ? `:${JSON.stringify(payload)}` : '');\n}\n\nexport class FetchError extends Error {\n  code?: number;\n\n  constructor(payload: any) {\n    super();\n    if (payload?.message) {\n      this.message = payload.message;\n    }\n    if (payload?.code) {\n      this.code = payload.code;\n    }\n    if (payload?.stack) {\n      this.stack = payload.stack;\n    }\n  }\n}\n"]}