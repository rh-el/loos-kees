{"version":3,"file":"BaseAPI.js","sourceRoot":"","sources":["../../../../src/lib/common/BaseAPI.ts"],"names":[],"mappings":";;;;;;;;;;;;AASA,MAA8B,OAAO;IAKnC,YAAY,MAAqB;QAHjC,mCAAkB;QAClB,iCAAc;QAGZ,uBAAA,IAAI,oBAAY,MAAM,CAAC,OAAO,MAAA,CAAC;QAC/B,uBAAA,IAAI,kBAAU,MAAM,CAAC,KAAK,MAAA,CAAC;IAC7B,CAAC;IAKS,KAAK,CAAC,GAAW,EAAE,YAAsB,EAAE,MAAoB,EAAE,OAA6B;QACtG,OAAO,uBAAA,IAAI,wBAAS,CAAC,KAAK,CAAC,GAAG,EAAE,YAAY,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IACjE,CAAC;IAED,IAAc,KAAK;QACjB,OAAO,uBAAA,IAAI,sBAAO,CAAC;IACrB,CAAC;CACF;;eApB6B,OAAO","sourcesContent":["import type Cache from '../utils/Cache.js';\nimport {type FetchMethod} from '../utils/Fetcher.js';\nimport type Fetcher from '../utils/Fetcher.js';\n\nexport interface BaseAPIParams {\n  fetcher: Fetcher;\n  cache: Cache;\n}\n\nexport default abstract class BaseAPI {\n\n  #fetcher: Fetcher;\n  #cache: Cache;\n\n  constructor(params: BaseAPIParams) {\n    this.#fetcher = params.fetcher;\n    this.#cache = params.cache;\n  }\n\n  protected fetch(url: string, jsonResponse: false, method: FetchMethod.HEAD, payload?: undefined): Promise<{ ok: boolean, status: number }>;\n  protected fetch(url: string, jsonResponse: true, method?: FetchMethod, payload?: Record<string, any>): Promise<any>;\n  protected fetch(url: string, jsonResponse?: boolean, method?: FetchMethod, payload?: Record<string, any>): Promise<string>;\n  protected fetch(url: string, jsonResponse?: boolean, method?: FetchMethod, payload?: Record<string, any>): Promise<any> {\n    return this.#fetcher.fetch(url, jsonResponse, method, payload);\n  }\n\n  protected get cache() {\n    return this.#cache;\n  }\n}\n"]}