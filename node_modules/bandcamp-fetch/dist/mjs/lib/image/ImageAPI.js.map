{"version":3,"file":"ImageAPI.js","sourceRoot":"","sources":["../../../../src/lib/image/ImageAPI.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseAPI, { type BaseAPIParams } from '../common/BaseAPI.js';\nimport { type ImageConstants, type ImageFormat } from '../types/Image.js';\nimport { CacheDataType } from '../utils/Cache.js';\nimport { URLS } from '../utils/Constants.js';\nimport type Limiter from '../utils/Limiter.js';\nimport ImageParser from './ImageParser.js';\n\nexport enum ImageFormatFilter {\n  /** Album image formats */\n  Album = 'album',\n  /** Artist / Profile image formats */\n  Bio = 'bio'\n}\n\nexport default class ImageAPI extends BaseAPI {\n\n  /**\n   * @internal\n   */\n  async getConstants(): Promise<ImageConstants> {\n    return this.cache.getOrSet(CacheDataType.Constants, 'imageConstants', async () => {\n      const html = await this.fetch(URLS.SITE_URL);\n      return ImageParser.parseImageConstants(html);\n    });\n  }\n\n  async getFormat(target?: string | number | ImageFormat, fallbackId?: number): Promise<ImageFormat | null> {\n    if (target && typeof target === 'object' && target.id !== undefined && target.name) {\n      return target;\n    }\n    let format;\n    if (target !== undefined) {\n      const imageConstants = await this.getConstants();\n      format = imageConstants.formats.find(\n        (format) => (typeof target === 'string' && format.name === target) ||\n          (Number.isInteger(target) && format.id === target)) || null;\n    }\n    if (format) {\n      return format;\n    }\n    if (fallbackId !== undefined) {\n      return this.getFormat(fallbackId);\n    }\n    return null;\n  }\n\n  async getFormats(filter?: ImageFormatFilter): Promise<ImageFormat[]> {\n    const constants = await this.getConstants();\n    if (filter === ImageFormatFilter.Album) {\n      return constants.formats.filter( (c) => c.name.startsWith('art_') );\n    }\n    else if (filter === ImageFormatFilter.Bio) {\n      return constants.formats.filter( (c) => c.name.startsWith('bio_') );\n    }\n\n    return constants.formats;\n  }\n}\n\nexport class LimiterImageAPI extends ImageAPI {\n\n  #limiter: Limiter;\n\n  constructor(params: BaseAPIParams & { limiter: Limiter }) {\n    super(params);\n    this.#limiter = params.limiter;\n  }\n\n  async getFormats(filter?: ImageFormatFilter  ): Promise<ImageFormat[]> {\n    return this.#limiter.schedule(() => super.getFormats(filter));\n  }\n\n  async getFormat(target?: string | number | ImageFormat  , fallbackId?: number  ): Promise<ImageFormat | null> {\n    return this.#limiter.schedule(() => super.getFormat(target, fallbackId));\n  }\n}\n"]}