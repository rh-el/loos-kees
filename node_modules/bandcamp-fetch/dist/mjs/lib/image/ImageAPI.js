var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _LimiterImageAPI_limiter;
import BaseAPI from '../common/BaseAPI.js';
import { CacheDataType } from '../utils/Cache.js';
import { URLS } from '../utils/Constants.js';
import ImageParser from './ImageParser.js';
export var ImageFormatFilter;
(function (ImageFormatFilter) {
    /** Album image formats */
    ImageFormatFilter["Album"] = "album";
    /** Artist / Profile image formats */
    ImageFormatFilter["Bio"] = "bio";
})(ImageFormatFilter || (ImageFormatFilter = {}));
export default class ImageAPI extends BaseAPI {
    /**
     * @internal
     */
    async getConstants() {
        return this.cache.getOrSet(CacheDataType.Constants, 'imageConstants', async () => {
            const html = await this.fetch(URLS.SITE_URL);
            return ImageParser.parseImageConstants(html);
        });
    }
    async getFormat(target, fallbackId) {
        if (target && typeof target === 'object' && target.id !== undefined && target.name) {
            return target;
        }
        let format;
        if (target !== undefined) {
            const imageConstants = await this.getConstants();
            format = imageConstants.formats.find((format) => (typeof target === 'string' && format.name === target) ||
                (Number.isInteger(target) && format.id === target)) || null;
        }
        if (format) {
            return format;
        }
        if (fallbackId !== undefined) {
            return this.getFormat(fallbackId);
        }
        return null;
    }
    async getFormats(filter) {
        const constants = await this.getConstants();
        if (filter === ImageFormatFilter.Album) {
            return constants.formats.filter((c) => c.name.startsWith('art_'));
        }
        else if (filter === ImageFormatFilter.Bio) {
            return constants.formats.filter((c) => c.name.startsWith('bio_'));
        }
        return constants.formats;
    }
}
export class LimiterImageAPI extends ImageAPI {
    constructor(params) {
        super(params);
        _LimiterImageAPI_limiter.set(this, void 0);
        __classPrivateFieldSet(this, _LimiterImageAPI_limiter, params.limiter, "f");
    }
    async getFormats(filter) {
        return __classPrivateFieldGet(this, _LimiterImageAPI_limiter, "f").schedule(() => super.getFormats(filter));
    }
    async getFormat(target, fallbackId) {
        return __classPrivateFieldGet(this, _LimiterImageAPI_limiter, "f").schedule(() => super.getFormat(target, fallbackId));
    }
}
_LimiterImageAPI_limiter = new WeakMap();
//# sourceMappingURL=ImageAPI.js.map